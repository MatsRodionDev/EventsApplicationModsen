// <auto-generated />
using System;
using EventsApplication.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsApplication.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240919191653_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventsApplication.Persistence.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("PlaceId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b84fe47-9c93-43f8-b7df-2be289eb1bf1"),
                            Category = "Music",
                            Description = "A great music festival featuring various artists.",
                            EventImageName = "",
                            EventTime = new DateTime(2024, 6, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            MaxParticipants = 50,
                            Name = "Music Festival",
                            PlaceId = new Guid("d9cadc88-99da-4eea-8ce6-9af7431642e1")
                        },
                        new
                        {
                            Id = new Guid("641db76b-c08d-46e4-9b72-8242662c66a3"),
                            Category = "Technology",
                            Description = "An insightful conference about the latest in technology.",
                            EventImageName = "",
                            EventTime = new DateTime(2024, 9, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            MaxParticipants = 30,
                            Name = "Tech Conference",
                            PlaceId = new Guid("d9cadc88-99da-4eea-8ce6-9af7431642e1")
                        },
                        new
                        {
                            Id = new Guid("bbf4fa4f-37c1-4fa4-88cf-8f02f67c8353"),
                            Category = "Art",
                            Description = "Explore the latest artworks from renowned artists.",
                            EventImageName = "",
                            EventTime = new DateTime(2024, 7, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            MaxParticipants = 20,
                            Name = "Art Exhibition",
                            PlaceId = new Guid("0225d3f4-33d2-4068-8275-ee56e4681e3e")
                        },
                        new
                        {
                            Id = new Guid("a267be90-4e7f-4dd8-a55f-e62b5de45b82"),
                            Category = "Health",
                            Description = "Learn about healthy living and wellness practices.",
                            EventImageName = "",
                            EventTime = new DateTime(2024, 8, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            MaxParticipants = 15,
                            Name = "Health Workshop",
                            PlaceId = new Guid("d9cadc88-99da-4eea-8ce6-9af7431642e1")
                        },
                        new
                        {
                            Id = new Guid("1c6de99a-34ac-4be9-8e61-c3b7aa7a0224"),
                            Category = "Food",
                            Description = "A delightful festival showcasing various cuisines.",
                            EventImageName = "",
                            EventTime = new DateTime(2024, 10, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            MaxParticipants = 1000,
                            Name = "Food Festival",
                            PlaceId = new Guid("0225d3f4-33d2-4068-8275-ee56e4681e3e")
                        });
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.EventSubscriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.PlaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0225d3f4-33d2-4068-8275-ee56e4681e3e"),
                            Name = "Mogilev Palace of Culture"
                        },
                        new
                        {
                            Id = new Guid("f131fdd7-e0ac-465f-8ec0-3056095ab06b"),
                            Name = "Central Park of Culture and Recreation"
                        },
                        new
                        {
                            Id = new Guid("b8160578-9e2b-4885-bdc1-9b55618240ec"),
                            Name = "Atrium Shopping Center"
                        },
                        new
                        {
                            Id = new Guid("5b685bbd-051f-4bc1-9dbb-8cd4c38217d0"),
                            Name = "Museum of History of Mogilev"
                        },
                        new
                        {
                            Id = new Guid("2d747b20-1a65-48cf-986a-2a97e557c34a"),
                            Name = "Thousand Years of Mogilev Square"
                        },
                        new
                        {
                            Id = new Guid("0559587c-b36d-4d42-b0f7-68639bf4e951"),
                            Name = "Cathedral of St. Stanislaus"
                        },
                        new
                        {
                            Id = new Guid("d9cadc88-99da-4eea-8ce6-9af7431642e1"),
                            Name = "Victory Park"
                        },
                        new
                        {
                            Id = new Guid("41dd7358-2cc4-4953-b141-659f1a7b8eea"),
                            Name = "Mogilev Zoo"
                        },
                        new
                        {
                            Id = new Guid("94d29087-2af2-44df-9484-d3d8b0a4c3ce"),
                            Name = "Europe Shopping Center"
                        },
                        new
                        {
                            Id = new Guid("d40dc058-d7c6-4dbf-92b8-ca9936a1362f"),
                            Name = "Olympic Sports Complex"
                        });
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43130ccf-faf1-4445-8f99-a54a1e661f5d"),
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Admin@gmail.com",
                            FirstName = "Admin",
                            IsActivated = true,
                            LastName = "Admin",
                            PasswordHash = "$2a$11$0fz1SsBAF8ZIC1nNAcJ0MOnrU8gQp1.CpP5oz5YD5OShgobb2wGAq",
                            UserRole = "Admin"
                        });
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.EventEntity", b =>
                {
                    b.HasOne("EventsApplication.Persistence.Entities.PlaceEntity", "EventPlace")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventPlace");
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.EventSubscriptionEntity", b =>
                {
                    b.HasOne("EventsApplication.Persistence.Entities.EventEntity", "Event")
                        .WithMany("Subscriptions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsApplication.Persistence.Entities.UserEntity", "User")
                        .WithMany("EventSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.EventEntity", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.PlaceEntity", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventsApplication.Persistence.Entities.UserEntity", b =>
                {
                    b.Navigation("EventSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
